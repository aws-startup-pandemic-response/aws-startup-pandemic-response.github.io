{"version":3,"sources":["logo.svg","CompanySearch.js","serviceWorker.js","index.js"],"names":["module","exports","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,yMCSfC,IAAMC,U,YCGdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,MAGAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.79402b67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport itemsjs from 'itemsjs'; \nimport \"react-bootstrap/dist/react-bootstrap.min.js\"\nimport { Button, ButtonToolbar} from 'react-bootstrap';\nimport AddToCalendar from 'react-add-to-calendar';\n\n\n\nclass CompanySearch extends React.Component {\n  constructor(props) {\n    super(props);\n\n    var rows = props.rows;\n    var townHalls = props.townHalls;\n\n    this.state = {\n      showSiteSummary: false,\n      nextTownhallEvent: townHalls[0],\n      configuration: {\n        searchableFields: ['Customer', 'Description', 'Delivery Regions', 'C19 Tags'],\n        sortings: {\n          name_asc: {\n            field: 'Customer',\n            order: 'asc'\n          }\n        },\n        aggregations: {\n          \"VideoTag\": {\n            title: 'Townhall Presenters',\n            size: 20\n          },\n          \"C19 Cat\": {\n            title: 'Category',\n            size: 20\n          },\n          \"C19 Tags\": {\n            title: 'Use Case',\n            size: 50\n          },\n          \"Delivery Regions\": {\n            title: 'Delivery Regions',\n            size: 20\n          },\n          \"C19 Stage\": {\n            title: 'Stage',\n            size: 20\n          }\n        }\n      }\n    }\n\n    var newFilters = {};\n    Object.keys(this.state.configuration.aggregations).map(function (v) {\n      newFilters[v] = [];\n    })\n\n    // Copying this.state using the spread op (...this.state)\n    this.state = {\n      ...this.state,\n      // the rows comes from external resources\n      // https://github.com/itemsapi/itemsapi-example-data/blob/master/jsfiddle/imdb.js\n      \n      // In React line below is:\n      //itemsjs: require('itemsjs')(rows, this.state.configuration),\n      itemsjs: itemsjs(rows, this.state.configuration),\n\n      query: '',\n      filters: newFilters,\n    }\n    \n    \n    this.toggleSiteDescription = this.toggleSiteDescription.bind(this);\n  }\n\n  changeQuery(e) {\n    this.setState({\n      query: e.target.value\n    });\n  }\n\n  reset() {\n    var newFilters = {};\n    Object.keys(this.state.configuration.aggregations).map(function (v) {\n      newFilters[v] = [];\n    })\n    this.setState({\n      filters: newFilters,\n      query: '',\n    })\n  }\n\n  handleCheckbox = (filterName, filterValue) => event => {\n    const oldFilters = this.state.filters;\n    let newFilters = oldFilters\n    let check = event.target.checked;\n\n    if (check) {\n      newFilters[filterName].push(filterValue)\n\n      this.setState({\n        filters: newFilters\n      })\n    } else {\n      var index = newFilters[filterName].indexOf(filterValue);\n      if (index > -1) {\n        newFilters[filterName].splice(index, 1);\n        this.setState({\n          filters: newFilters\n        })\n      }\n    }\n  }\n\n  get searchResult() {\n\n    var result = this.state.itemsjs.search({\n      per_page: 1000,\n      query: this.state.query,\n      filters: this.state.filters\n    })\n    return result\n  }\n  \n  toggleSiteDescription() {\n    this.setState(state => ({\n      showSiteSummary: !state.showSiteSummary\n    }));\n  }\n\n\n  render() {\n    \n    var siteDescToggledOnClass = this.state.showSiteSummary ? \"whatThisIsCopy siteDescriptionToggledOn\" : \"whatThisIsCopy siteDescriptionToggledOff\";\n    var siteDescToggledOnCopy = this.state.showSiteSummary ? \"Less about this site\" : \"More about this site\";\n    var calendarLinkUrl = 'webcal://' + window.location.href + 'StartupPandemicResponseVirtualTownhallTelemedicineTriage.ics';\n    \n\n    \n    return (\n      <div>\n        <nav className=\"navbar navbar-default navbar-fixed-top\">\n          <div className=\"container\">\n            <div className=\"navbar-header\">\n              <a className=\"navbar-brand title\" href=\"#\" onClick={this.reset.bind(this)}><img className='awshclsLogo' src={process.env.PUBLIC_URL + 'aws.hcls.logo.png'} /> Startup Pandemic Response</a>\n            </div>\n            <div id=\"navbar\">\n              <form className=\"navbar-form navbar-left\">\n                <div className=\"form-group\">\n                  <input type=\"text\" value={this.state.query} onChange={this.changeQuery.bind(this)} className=\"form-control\" placeholder=\"Search\" />\n                </div>\n              </form>\n              <a className=\"siteDescriptionToggle\" href='#' onClick={this.toggleSiteDescription} > {siteDescToggledOnCopy}</a>\n            </div>\n          </div>\n        </nav>\n\n        <div className=\"container\" >\n        {/*<div className=\"townhallNotice\">\n            <div className='townhallText'>\n              <b>Join us for  a virtual startup presentation on telemedicine and triage April 7 at 11 am EST </b>\n            </div>\n            <div className='addToCalendarDiv'>\n              <AddToCalendar event={this.state.nextTownhallEvent} />\n            </div>\n        </div>*/}\n        <div className={siteDescToggledOnClass}>\n          The healthcare startup team at AWS is working to more rapidly get relevant, production-ready, clinically-adopted solutions into the hands of healthcare providers around the world. This site is an evolving effort to match inbound demand from care providers around the world with best-in-breed solutions.\n          If you believe you have a relevant solution and wish us to evaluate for inclusion, <a href='https://airtable.com/shr4TqPNqXOtNojvj/' target=\"_blank\"> please let us know here.</a>\n          <br />\n          <small>*Note, we are looking to connect parties who will then evaluate one another for suitability and fit. Nothing herein should be considered an endorsement of any particular company or solution.</small>\n        </div>\n          \n          \n          \n          <div className=\"row\">\n            <div className=\"col-4 col-md-3 facets\">\n              {\n                Object.entries(this.searchResult.data.aggregations).map(([key, value]) => {\n                  return (\n                    <div key={key}>\n                      <h5 style={{ marginBottom: '5px' }}><strong style={{ color: '#FF9900' }}>{value.title}</strong></h5>\n\n                      <ul className=\"browse-list list-unstyled long-list\" style={{ marginBottom: '0px' }}>\n                        {\n                          Object.entries(value.buckets).map(([keyB, valueB]) => {\n                            return (\n                              <li key={valueB.key}>\n                                <div className=\"checkbox block\" style={{ marginTop: '0px', marginBottom: '0px' }}>\n                                  <label>\n                                    <span><input className=\"checkbox\" type=\"checkbox\" checked={this.state.filters[value.name].indexOf(valueB.key)>-1 || false} onChange={this.handleCheckbox(value.name, valueB.key)} />\n                                     &nbsp;{valueB.key} <small>({valueB.doc_count})</small></span>\n                                  </label>\n                                </div>\n                              </li>\n                            )\n                          })\n                        }\n                      </ul>\n                    </div>\n                  )\n                })\n              }\n            </div>\n            <div className=\"col-8 col-md-9\">\n            <div className=\"breadcrumbs\"></div>\n            <div className=\"clearfix\"></div>\n            <div className=\"table table-striped\">\n                {\n                  Object.entries(this.searchResult.data.items).map(([key, item]) => {\n                  \n                    var logoUrl = \"\";\n                    \n                    if(item[\"Logo\"][0]){\n                      //logoUrl = item[\"Logo\"][0][\"thumbnails\"][\"large\"][\"url\"];\n                      logoUrl = item[\"Logo\"][0][\"url\"];\n                    }\n                    \n                    function TownhallVideoPrezo(params) {\n                    \n                      if(params.videoUrl == \"\"){\n                        return <div></div>\n                      } else {\n                        return <div className='townhallLinkSection' >\n                            <a href={params.videoUrl} target='_blank' >Watch the AWS Startup Pandemic Response Townhall featuring {params.cutomerName}</a>\n                          </div>\n                                                \n                      }\n                    }\n                    \n\n                    var contactString = \"mailto:hcls-startups@amazon.com?subject=Introduction to \" + item.Customer +\"&body=(Please include your name, company, and title)\";\n                  \n                    return (\n                    <div className=\"companyRow\" key={key}>\n                      <div className='companyIcon'>\n                        <img src={ logoUrl } />\n                      </div>\n                      <div className=\"companyDescriptionColumn\">\n                          <h5><b><a href={item[\"URL\"]} target='_blank'> {item.Customer}</a></b></h5>\n                          <div>\n                              <b>{ item[\"C19 Cat\"] }: { item[\"C19 SubCat\"] }; Delivery Regions: { item['Delivery Regions'].join(\" \") }</b>\n                          </div>\n                          <TownhallVideoPrezo cutomerName={item.Customer}  videoUrl={item[\"C19 Video\"]} />\n                          {item['Description']}\n                          <div className=\"emailColumn\">\n                            <Button className=\"emailButton\" variant=\"primary\" href={contactString}>Get Introduced to {item.Customer} </Button> \n                          </div>\n                      </div>\n\n                    </div>)}\n                    )\n                  }\n            </div>\n            <div className=\"clearfix\"></div>\n          </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default CompanySearch;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}